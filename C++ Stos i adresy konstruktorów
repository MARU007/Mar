// PO ZAD 4.cpp : Defines the entry point for the console application.
//Napisz w C++ klasę stosu opartego o tablicę dynamiczną, a następnie

/*Dodaj konstruktory : 1 - parametrowy z rozmiarem stosu konstruktor oraz domyślny(bezparametrowy)
a także destruktor zwalniający pamięć.Dodaj do nich instrukcje wypisujące informacje o ich
wywołaniu na ekran i zaobserwuj, kiedy się wywołują dla obiektów automatycznych i dynamicznych.

Zaobserwuj (np. poprzez wypisywanie komunikatów w konstruktorach) powstawanie niewidocznego
tymczasowego obiektu automatycznego. Powstaje on, kiedy funkcja zwraca jako wynik obiekt
automatyczny zdefiniowany w niej. W GCC należy wyłączyć opcję, która powoduje niepowstawanie
takich obiektów - "-fno-elide-constructors".

W konstruktorach i destruktorze wypisuj adresy obiektów, które się tworzą/usuwają i powiąż je
w pary - dla każdego wywołania kontruktora musi być dokładnie jedno wywołanie destruktora.
*/


#include "stdafx.h"
#include <iostream>
#include <stdlib.h>
#include <conio.h>

using namespace std;

class Stos
{
	int *tab;
	int rozmiar, wierzcholek;

public:

	Stos(int rozmiar2)
	{
		tab = new int[rozmiar2];
		wierzcholek = -1;
		rozmiar = rozmiar2;
		cout << "Adres: " << tab << " <<---- konstruktor z 1 parametrem" << endl;
	}

	Stos()
	{
		tab = new int[20];
		wierzcholek = -1;
		rozmiar = 20;
		cout << "Adres: " << tab << " <<---- konstruktor bezparametrowy" << endl;
	}

	void init(int N)
	{
		tab = new int[N];
		wierzcholek = -1;
		rozmiar = N;

	}

	void push(int a)
	{
		if (!full()) tab[++wierzcholek] = a;
		else cout << "Stos jest pelny" << endl;
	}

	void pop()
	{
		--wierzcholek;
	}

	int top()
	{
		if (empty())
		{
			cout << "Stos jest pusty!" << endl;
		}
		return tab[wierzcholek];
	}

	int empty()
	{
		if (wierzcholek == -1) return 1;
		else return 0;
	}

	int full()
	{
		if (wierzcholek == (rozmiar - 1)) return 1;
		else return 0;
	}
	void destroy()
	{
		delete[] tab;
	}
	Stos(Stos& pow)
	{
		tab = new int[pow.rozmiar];
		cout << "Adres: " << tab << " <<---- kopia" << endl ;

		wierzcholek = pow.wierzcholek;
		rozmiar = pow.rozmiar;

	}
	~Stos()
	{
		cout << "Adres stosu: " << tab << "<<---- destruktor" << endl << endl << endl;
		delete[] tab;
	}

};


void f(Stos s, int a) {
	s.push(a);
}


int main()
{
	Stos s;
	s.push(0);
	f(s, 1);
	//getchar();  // jeśli adresy są takie same to użyć, aby były inne 
	f(s, 2);
	while (!s.empty()) {
		cout <<
		s.top();
		s.pop();
	}
	getchar();


	/*	Stos(1);
	getchar();
	*/
	return 0;
}
